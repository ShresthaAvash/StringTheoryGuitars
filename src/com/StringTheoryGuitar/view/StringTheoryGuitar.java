/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.StringTheoryGuitar.view;

import com.StringTheoryGuitar.model.GuitarDetails;
import com.StringTheoryGuitar.util.Validation;
import com.StringTheoryGuitar.controller.algorithms.LinearSearch;
import com.StringTheoryGuitar.controller.algorithms.BinarySearch;
import com.StringTheoryGuitar.controller.algorithms.MergeSort;
import com.StringTheoryGuitar.controller.algorithms.InsertionSort;
import com.StringTheoryGuitar.controller.algorithms.SelectionSort;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Avash Shrestha
 */
public class StringTheoryGuitar extends javax.swing.JFrame {
    private java.awt.CardLayout cardLayout;
    private List<GuitarDetails> guitarList; // To store the list of guitars
    
    /**
     * Creates new form StringTheoryGuitar
     */
    public StringTheoryGuitar() {
        initComponents();
        initializeLayout();
        initializeData();
    }
    
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(loginpanel, "loginpanel");
        getContentPane().add(mainpanel, "mainpanel");

        // Start with the loading screen
        loadScreen("loginpanel");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainpanel = new javax.swing.JPanel();
        navigationbar = new javax.swing.JPanel();
        homebutton = new javax.swing.JLabel();
        aboutusbutton = new javax.swing.JLabel();
        guitarsbutton = new javax.swing.JLabel();
        adminbutton = new javax.swing.JLabel();
        logoutbutton = new javax.swing.JLabel();
        homepanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        homeadd = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        homeviewguitar = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        backgroundimg = new javax.swing.JLabel();
        adminpanel = new javax.swing.JPanel();
        guitarlist = new javax.swing.JScrollPane();
        guitartable = new javax.swing.JTable();
        adminpaneltext = new javax.swing.JLabel();
        addbutton = new javax.swing.JLabel();
        updatebutton = new javax.swing.JLabel();
        sortby = new javax.swing.JComboBox<>();
        sorttype = new javax.swing.JComboBox<>();
        deletebutton = new javax.swing.JLabel();
        clearbutton = new javax.swing.JLabel();
        sntext = new javax.swing.JTextField();
        stringtypecombo = new javax.swing.JComboBox<>();
        stringtypelabel = new javax.swing.JLabel();
        snlabel = new javax.swing.JLabel();
        guitarmodeltext = new javax.swing.JTextField();
        snlabel1 = new javax.swing.JLabel();
        snlabel2 = new javax.swing.JLabel();
        snlabel3 = new javax.swing.JLabel();
        brandcombo = new javax.swing.JComboBox<>();
        pricetext = new javax.swing.JTextField();
        snlabel4 = new javax.swing.JLabel();
        servicebox = new javax.swing.JCheckBox();
        typecombo1 = new javax.swing.JComboBox<>();
        quantity = new javax.swing.JTextField();
        snlabel5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        aboutuspanel = new javax.swing.JPanel();
        aboutustitle = new javax.swing.JLabel();
        aboutp1 = new javax.swing.JLabel();
        aboutp2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        guitarspanel = new javax.swing.JPanel();
        sorttypeguitar = new javax.swing.JComboBox<>();
        binarysearch = new javax.swing.JCheckBox();
        sortbyguitars = new javax.swing.JComboBox<>();
        searchguitars = new javax.swing.JLabel();
        searchguitarsfield = new javax.swing.JTextField();
        guitarlist1 = new javax.swing.JScrollPane();
        guitartable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        loginpanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        passlabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernamelabel = new javax.swing.JLabel();
        usernametextfield = new javax.swing.JTextField();
        passtextfield = new javax.swing.JPasswordField();
        loginbutton = new javax.swing.JLabel();
        forgotpassbutton = new javax.swing.JLabel();

        mainpanel.setBackground(new java.awt.Color(255, 255, 255));
        mainpanel.setMaximumSize(new java.awt.Dimension(1200, 700));
        mainpanel.setMinimumSize(new java.awt.Dimension(1200, 700));
        mainpanel.setPreferredSize(new java.awt.Dimension(1200, 700));
        mainpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        navigationbar.setBackground(new java.awt.Color(207, 193, 178));

        homebutton.setBackground(new java.awt.Color(207, 193, 178));
        homebutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        homebutton.setForeground(new java.awt.Color(102, 102, 102));
        homebutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homebutton.setText("HOME");
        homebutton.setOpaque(true);
        homebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homebuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homebuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homebuttonMouseExited(evt);
            }
        });

        aboutusbutton.setBackground(new java.awt.Color(207, 193, 178));
        aboutusbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        aboutusbutton.setForeground(new java.awt.Color(102, 102, 102));
        aboutusbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutusbutton.setText("ABOUT US");
        aboutusbutton.setOpaque(true);
        aboutusbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutusbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aboutusbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aboutusbuttonMouseExited(evt);
            }
        });

        guitarsbutton.setBackground(new java.awt.Color(207, 193, 178));
        guitarsbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        guitarsbutton.setForeground(new java.awt.Color(102, 102, 102));
        guitarsbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        guitarsbutton.setText("GUITARS");
        guitarsbutton.setOpaque(true);
        guitarsbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guitarsbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                guitarsbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                guitarsbuttonMouseExited(evt);
            }
        });

        adminbutton.setBackground(new java.awt.Color(207, 193, 178));
        adminbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        adminbutton.setForeground(new java.awt.Color(102, 102, 102));
        adminbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        adminbutton.setText("ADMIN");
        adminbutton.setOpaque(true);
        adminbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                adminbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                adminbuttonMouseExited(evt);
            }
        });

        logoutbutton.setBackground(new java.awt.Color(207, 193, 178));
        logoutbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        logoutbutton.setForeground(new java.awt.Color(102, 102, 102));
        logoutbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoutbutton.setText("LOGOUT");
        logoutbutton.setOpaque(true);
        logoutbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutbuttonMouseExited(evt);
            }
        });

        javax.swing.GroupLayout navigationbarLayout = new javax.swing.GroupLayout(navigationbar);
        navigationbar.setLayout(navigationbarLayout);
        navigationbarLayout.setHorizontalGroup(
            navigationbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homebutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(aboutusbutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
            .addComponent(guitarsbutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
            .addComponent(adminbutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
            .addComponent(logoutbutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        navigationbarLayout.setVerticalGroup(
            navigationbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navigationbarLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(homebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aboutusbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guitarsbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                .addComponent(logoutbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        mainpanel.add(navigationbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        homepanel.setBackground(new java.awt.Color(255, 255, 255));
        homepanel.setMaximumSize(new java.awt.Dimension(1200, 700));
        homepanel.setMinimumSize(new java.awt.Dimension(0, 700));
        homepanel.setPreferredSize(new java.awt.Dimension(990, 700));
        homepanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Microsoft YaHei", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("String Theory Guitar");
        jLabel7.setOpaque(true);
        homepanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 400, 80));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Keep the Music Coming");
        jLabel8.setOpaque(true);
        homepanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 550, 410, 50));

        homeadd.setBackground(new java.awt.Color(255, 255, 255));
        homeadd.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        homeadd.setForeground(new java.awt.Color(102, 102, 102));
        homeadd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homeadd.setText("Add/Edit Guitar");
        homeadd.setOpaque(true);
        homeadd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeaddMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeaddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homeaddMouseExited(evt);
            }
        });
        homepanel.add(homeadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 290, 50));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Effortlessly Manage your Inventory");
        jLabel9.setOpaque(true);
        homepanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, 430, 50));

        homeviewguitar.setBackground(new java.awt.Color(255, 255, 255));
        homeviewguitar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        homeviewguitar.setForeground(new java.awt.Color(102, 102, 102));
        homeviewguitar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        homeviewguitar.setText("View Guitars On Based on their types");
        homeviewguitar.setOpaque(true);
        homeviewguitar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeviewguitarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeviewguitarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homeviewguitarMouseExited(evt);
            }
        });
        homepanel.add(homeviewguitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 330, 460, 50));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/classicguitar.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        homepanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 240, 370, 290));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/music icon.png"))); // NOI18N
        homepanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 400, 130, 130));

        backgroundimg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/backgroundimg.png"))); // NOI18N
        homepanel.add(backgroundimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, -1, -1));

        mainpanel.add(homepanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 0, 990, 700));

        adminpanel.setBackground(new java.awt.Color(255, 255, 255));
        adminpanel.setMaximumSize(new java.awt.Dimension(2147483647, 700));
        adminpanel.setMinimumSize(new java.awt.Dimension(906, 700));
        adminpanel.setPreferredSize(new java.awt.Dimension(990, 700));
        adminpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        guitartable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SN", "Name", "Brand", "Type", "Price", "Free Service", "String Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        guitartable.getTableHeader().setReorderingAllowed(false);
        guitarlist.setViewportView(guitartable);
        if (guitartable.getColumnModel().getColumnCount() > 0) {
            guitartable.getColumnModel().getColumn(0).setResizable(false);
            guitartable.getColumnModel().getColumn(1).setResizable(false);
            guitartable.getColumnModel().getColumn(2).setResizable(false);
            guitartable.getColumnModel().getColumn(3).setResizable(false);
            guitartable.getColumnModel().getColumn(4).setResizable(false);
            guitartable.getColumnModel().getColumn(5).setResizable(false);
            guitartable.getColumnModel().getColumn(6).setResizable(false);
            guitartable.getColumnModel().getColumn(7).setResizable(false);
        }

        adminpanel.add(guitarlist, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 77, 816, 330));

        adminpaneltext.setBackground(new java.awt.Color(255, 255, 255));
        adminpaneltext.setFont(new java.awt.Font("Microsoft YaHei", 1, 36)); // NOI18N
        adminpaneltext.setForeground(new java.awt.Color(102, 102, 102));
        adminpaneltext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        adminpaneltext.setText("ADMIN PANEL");
        adminpaneltext.setOpaque(true);
        adminpanel.add(adminpaneltext, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 6, 327, 59));

        addbutton.setBackground(new java.awt.Color(207, 193, 178));
        addbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        addbutton.setForeground(new java.awt.Color(51, 51, 51));
        addbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addbutton.setText("ADD");
        addbutton.setOpaque(true);
        addbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addbuttonMouseExited(evt);
            }
        });
        adminpanel.add(addbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 430, 129, 52));

        updatebutton.setBackground(new java.awt.Color(207, 193, 178));
        updatebutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        updatebutton.setForeground(new java.awt.Color(51, 51, 51));
        updatebutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updatebutton.setText("UPDATE");
        updatebutton.setOpaque(true);
        updatebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updatebuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updatebuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updatebuttonMouseExited(evt);
            }
        });
        adminpanel.add(updatebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 430, 129, 52));

        sortby.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "SN", "Name", "Brand", "Type", "Price", "Quantity" }));
        sortby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyActionPerformed(evt);
            }
        });
        adminpanel.add(sortby, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 610, 90, -1));

        sorttype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort Type", "Insertion", "Merge", "Selection" }));
        sorttype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sorttypeActionPerformed(evt);
            }
        });
        adminpanel.add(sorttype, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 610, 90, -1));

        deletebutton.setBackground(new java.awt.Color(207, 193, 178));
        deletebutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        deletebutton.setForeground(new java.awt.Color(51, 51, 51));
        deletebutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deletebutton.setText("DELETE");
        deletebutton.setOpaque(true);
        deletebutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletebuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deletebuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deletebuttonMouseExited(evt);
            }
        });
        adminpanel.add(deletebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 430, 129, 52));

        clearbutton.setBackground(new java.awt.Color(207, 193, 178));
        clearbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        clearbutton.setForeground(new java.awt.Color(51, 51, 51));
        clearbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearbutton.setText("CLEAR");
        clearbutton.setOpaque(true);
        clearbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clearbuttonMouseExited(evt);
            }
        });
        adminpanel.add(clearbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 430, 129, 52));

        sntext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sntextActionPerformed(evt);
            }
        });
        adminpanel.add(sntext, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 530, 80, 40));

        stringtypecombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nylon", "Steel" }));
        stringtypecombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stringtypecomboActionPerformed(evt);
            }
        });
        adminpanel.add(stringtypecombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 530, 130, 30));

        stringtypelabel.setBackground(new java.awt.Color(255, 255, 255));
        stringtypelabel.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        stringtypelabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stringtypelabel.setText("String Type");
        stringtypelabel.setOpaque(true);
        adminpanel.add(stringtypelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 510, 80, -1));

        snlabel.setBackground(new java.awt.Color(255, 255, 255));
        snlabel.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        snlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snlabel.setText("SN");
        snlabel.setOpaque(true);
        adminpanel.add(snlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 510, 40, -1));

        guitarmodeltext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guitarmodeltextActionPerformed(evt);
            }
        });
        adminpanel.add(guitarmodeltext, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 530, 140, 40));

        snlabel1.setBackground(new java.awt.Color(255, 255, 255));
        snlabel1.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        snlabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snlabel1.setText("Guitar Model");
        snlabel1.setOpaque(true);
        adminpanel.add(snlabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 510, -1, -1));

        snlabel2.setBackground(new java.awt.Color(255, 255, 255));
        snlabel2.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        snlabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snlabel2.setText("Brand");
        snlabel2.setOpaque(true);
        adminpanel.add(snlabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 510, -1, -1));

        snlabel3.setBackground(new java.awt.Color(255, 255, 255));
        snlabel3.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        snlabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snlabel3.setText("Type");
        snlabel3.setOpaque(true);
        adminpanel.add(snlabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 510, 50, -1));

        brandcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gibson", "Fender", "Enya", "Deviser" }));
        brandcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandcomboActionPerformed(evt);
            }
        });
        adminpanel.add(brandcombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 530, 130, 30));

        pricetext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricetextActionPerformed(evt);
            }
        });
        adminpanel.add(pricetext, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 530, 140, 40));

        snlabel4.setBackground(new java.awt.Color(255, 255, 255));
        snlabel4.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        snlabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snlabel4.setText("Price");
        snlabel4.setOpaque(true);
        adminpanel.add(snlabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 510, -1, -1));

        servicebox.setBackground(new java.awt.Color(255, 255, 255));
        servicebox.setText("Free Service");
        servicebox.setOpaque(true);
        servicebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serviceboxActionPerformed(evt);
            }
        });
        adminpanel.add(servicebox, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 590, -1, -1));

        typecombo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Acoustic", "SemiAcoustic", "Electric" }));
        typecombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typecombo1ActionPerformed(evt);
            }
        });
        adminpanel.add(typecombo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 530, 130, 30));

        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });
        adminpanel.add(quantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, 80, 40));

        snlabel5.setBackground(new java.awt.Color(255, 255, 255));
        snlabel5.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        snlabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        snlabel5.setText("Quantity");
        snlabel5.setOpaque(true);
        adminpanel.add(snlabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 580, -1, -1));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/backgroundimg.png"))); // NOI18N
        adminpanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 0, -1, -1));

        mainpanel.add(adminpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 0, -1, 700));

        aboutuspanel.setBackground(new java.awt.Color(255, 255, 255));
        aboutuspanel.setMinimumSize(new java.awt.Dimension(0, 700));
        aboutuspanel.setPreferredSize(new java.awt.Dimension(990, 700));
        aboutuspanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        aboutustitle.setBackground(new java.awt.Color(255, 255, 255));
        aboutustitle.setFont(new java.awt.Font("Microsoft YaHei", 1, 36)); // NOI18N
        aboutustitle.setForeground(new java.awt.Color(102, 102, 102));
        aboutustitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutustitle.setText("ABOUT US");
        aboutustitle.setOpaque(true);
        aboutuspanel.add(aboutustitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 230, 72));

        aboutp1.setBackground(new java.awt.Color(255, 255, 255));
        aboutp1.setFont(new java.awt.Font("Microsoft YaHei", 0, 14)); // NOI18N
        aboutp1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutp1.setText("<html>\nString Theory Guitars is a boutique guitar company known for its<br>\n handcrafted instruments, designed with both performance and <br>\naesthetics in mind. Combining traditional craftsmanship with<br>\n modern techniques, each guitar is meticulously crafted to produce<br>\n rich, resonant tones. String Theory Guitars offers a wide range of<br>\n models, from sleek, minimalist designs to more intricate, visually<br>\n striking pieces, ensuring there’s a perfect guitar for every musicians<br>\n needs.<br>\n</html>");
        aboutp1.setOpaque(true);
        aboutuspanel.add(aboutp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 470, 187));

        aboutp2.setBackground(new java.awt.Color(255, 255, 255));
        aboutp2.setFont(new java.awt.Font("Microsoft YaHei", 0, 14)); // NOI18N
        aboutp2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aboutp2.setText("<html>\n With a focus on high-quality materials and attention to<br>\n detail, String Theory Guitars ensures that every guitar<br>\n not only sounds exceptional but feels comfortable to<br>\n play. Their instruments are built to last, designed for<br>\n both beginners and professional musicians looking to<br>\n elevate their sound. Whether you’re playing on stage or <br>\nin the studio, String Theory Guitars is committed to<br>\n providing a unique and reliable instrument for musicians<br>\n who value both form and function.<br>\n</html>");
        aboutp2.setOpaque(true);
        aboutuspanel.add(aboutp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 380, 400, 233));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/aboutimg2.png"))); // NOI18N
        aboutuspanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, 390, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/aboutimg1.png"))); // NOI18N
        aboutuspanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 130, -1, 240));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/backgroundimg.png"))); // NOI18N
        aboutuspanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 0, -1, -1));

        mainpanel.add(aboutuspanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 0, 990, 700));

        guitarspanel.setBackground(new java.awt.Color(255, 255, 255));
        guitarspanel.setMaximumSize(new java.awt.Dimension(32767, 700));
        guitarspanel.setMinimumSize(new java.awt.Dimension(0, 700));
        guitarspanel.setPreferredSize(new java.awt.Dimension(990, 700));
        guitarspanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sorttypeguitar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort Type", "Insertion", "Merge", "Selection" }));
        sorttypeguitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sorttypeguitarActionPerformed(evt);
            }
        });
        guitarspanel.add(sorttypeguitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 630, 120, -1));

        binarysearch.setBackground(new java.awt.Color(255, 255, 255));
        binarysearch.setForeground(new java.awt.Color(51, 51, 51));
        binarysearch.setText("BinarySearch");
        binarysearch.setOpaque(true);
        binarysearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarysearchActionPerformed(evt);
            }
        });
        guitarspanel.add(binarysearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 600, 110, -1));

        sortbyguitars.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort By", "SN", "Name", "Brand", "Type", "Price", "Quantity" }));
        sortbyguitars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortbyguitarsActionPerformed(evt);
            }
        });
        guitarspanel.add(sortbyguitars, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 630, 120, -1));

        searchguitars.setBackground(new java.awt.Color(255, 255, 255));
        searchguitars.setForeground(new java.awt.Color(102, 102, 102));
        searchguitars.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchguitars.setText("SEARCH");
        searchguitars.setOpaque(true);
        searchguitars.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchguitarsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchguitarsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchguitarsMouseExited(evt);
            }
        });
        guitarspanel.add(searchguitars, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 600, 60, 20));
        guitarspanel.add(searchguitarsfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 600, 110, -1));

        guitartable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SN", "Name", "Brand", "Type", "Price", "Servicable", "String Type", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        guitartable1.getTableHeader().setReorderingAllowed(false);
        guitarlist1.setViewportView(guitartable1);
        if (guitartable1.getColumnModel().getColumnCount() > 0) {
            guitartable1.getColumnModel().getColumn(0).setResizable(false);
            guitartable1.getColumnModel().getColumn(1).setResizable(false);
            guitartable1.getColumnModel().getColumn(2).setResizable(false);
            guitartable1.getColumnModel().getColumn(3).setResizable(false);
            guitartable1.getColumnModel().getColumn(4).setResizable(false);
            guitartable1.getColumnModel().getColumn(5).setResizable(false);
            guitartable1.getColumnModel().getColumn(6).setResizable(false);
            guitartable1.getColumnModel().getColumn(7).setResizable(false);
        }

        guitarspanel.add(guitarlist1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 816, 401));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Microsoft YaHei", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("GUITARS");
        jLabel2.setOpaque(true);
        guitarspanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(367, 49, 240, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/backgroundimg.png"))); // NOI18N
        guitarspanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 0, -1, -1));

        mainpanel.add(guitarspanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 0, 990, 700));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1200, 700));
        setMinimumSize(new java.awt.Dimension(1200, 700));
        setResizable(false);

        loginpanel.setBackground(new java.awt.Color(255, 255, 255));
        loginpanel.setMaximumSize(new java.awt.Dimension(1200, 700));
        loginpanel.setMinimumSize(new java.awt.Dimension(1200, 700));
        loginpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/StringTheoryGuitar/resources/logostringtheoryguitars.png"))); // NOI18N
        loginpanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        passlabel.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        passlabel.setForeground(new java.awt.Color(153, 153, 153));
        passlabel.setText("Password");
        loginpanel.add(passlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 340, 130, 100));

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("LOGIN");
        loginpanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 70, 400, 90));

        usernamelabel.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        usernamelabel.setForeground(new java.awt.Color(153, 153, 153));
        usernamelabel.setText("Username");
        loginpanel.add(usernamelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, 130, 100));

        usernametextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernametextfieldActionPerformed(evt);
            }
        });
        loginpanel.add(usernametextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 230, 280, 60));
        loginpanel.add(passtextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 360, 280, 60));

        loginbutton.setBackground(new java.awt.Color(206, 193, 177));
        loginbutton.setFont(new java.awt.Font("Microsoft YaHei", 1, 14)); // NOI18N
        loginbutton.setForeground(new java.awt.Color(51, 51, 51));
        loginbutton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginbutton.setText("LOGIN");
        loginbutton.setOpaque(true);
        loginbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loginbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loginbuttonMouseExited(evt);
            }
        });
        loginpanel.add(loginbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 480, 370, 40));

        forgotpassbutton.setForeground(new java.awt.Color(153, 153, 153));
        forgotpassbutton.setText("Forgot you password?");
        forgotpassbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forgotpassbuttonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                forgotpassbuttonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                forgotpassbuttonMouseExited(evt);
            }
        });
        loginpanel.add(forgotpassbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 430, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loginpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loginpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernametextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernametextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernametextfieldActionPerformed

    private void loginbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginbuttonMouseEntered
        loginbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_loginbuttonMouseEntered

    private void loginbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginbuttonMouseExited
        loginbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_loginbuttonMouseExited

    private void loginbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginbuttonMouseClicked
        if (usernametextfield.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill out username");
        } else if (passtextfield.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill out Password");
        } else if (usernametextfield.getText().equals("admin") && passtextfield.getText().equals("admin")) {
            loadScreen("mainpanel");
            adminpanel.setVisible(false);
            aboutuspanel.setVisible(false);
            guitarspanel.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Wrong username or password!", "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loginbuttonMouseClicked

    private void homebuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homebuttonMouseEntered
        homebutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_homebuttonMouseEntered

    private void homebuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homebuttonMouseExited
        homebutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_homebuttonMouseExited

    private void aboutusbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutusbuttonMouseEntered
        aboutusbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_aboutusbuttonMouseEntered

    private void aboutusbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutusbuttonMouseExited
        aboutusbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_aboutusbuttonMouseExited

    private void guitarsbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guitarsbuttonMouseEntered
        guitarsbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_guitarsbuttonMouseEntered

    private void guitarsbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guitarsbuttonMouseExited
        guitarsbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_guitarsbuttonMouseExited

    private void adminbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminbuttonMouseEntered
        adminbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_adminbuttonMouseEntered

    private void adminbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminbuttonMouseExited
        adminbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_adminbuttonMouseExited

    private void homebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homebuttonMouseClicked
        adminpanel.setVisible(false);
        homepanel.setVisible(true);
        guitarspanel.setVisible(false);
        aboutuspanel.setVisible(false);
    }//GEN-LAST:event_homebuttonMouseClicked

    private void adminbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminbuttonMouseClicked
        adminpanel.setVisible(true);
        homepanel.setVisible(false);
        guitarspanel.setVisible(false);
        aboutuspanel.setVisible(false);
    }//GEN-LAST:event_adminbuttonMouseClicked

    private void addbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addbuttonMouseEntered
        addbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_addbuttonMouseEntered

    private void addbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addbuttonMouseExited
        addbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_addbuttonMouseExited

    private void updatebuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatebuttonMouseEntered
        updatebutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_updatebuttonMouseEntered

    private void updatebuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatebuttonMouseExited
        updatebutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_updatebuttonMouseExited

    private void deletebuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletebuttonMouseEntered
        deletebutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_deletebuttonMouseEntered

    private void deletebuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletebuttonMouseExited
        deletebutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_deletebuttonMouseExited

    private void aboutusbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutusbuttonMouseClicked
        adminpanel.setVisible(false);
        homepanel.setVisible(false);
        guitarspanel.setVisible(false);
        aboutuspanel.setVisible(true);
    }//GEN-LAST:event_aboutusbuttonMouseClicked

    private void guitarsbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guitarsbuttonMouseClicked
        adminpanel.setVisible(false);
        homepanel.setVisible(false);
        aboutuspanel.setVisible(false);
        guitarspanel.setVisible(true);
    }//GEN-LAST:event_guitarsbuttonMouseClicked

    private void logoutbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutbuttonMouseClicked
        loadScreen("loginpanel");
        usernametextfield.setText("");
        passtextfield.setText("");
    }//GEN-LAST:event_logoutbuttonMouseClicked

    private void logoutbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutbuttonMouseEntered
        logoutbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_logoutbuttonMouseEntered

    private void logoutbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutbuttonMouseExited
        logoutbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_logoutbuttonMouseExited

    private void forgotpassbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotpassbuttonMouseEntered
        forgotpassbutton.setForeground(new Color(51,51,51));
    }//GEN-LAST:event_forgotpassbuttonMouseEntered

    private void forgotpassbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotpassbuttonMouseExited
        forgotpassbutton.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_forgotpassbuttonMouseExited

    private void forgotpassbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotpassbuttonMouseClicked
        JOptionPane.showMessageDialog(null, "Username and Password are now automatically filled!");
        usernametextfield.setText("admin");
        passtextfield.setText("admin");
    }//GEN-LAST:event_forgotpassbuttonMouseClicked

    private void clearbuttonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearbuttonMouseExited
        clearbutton.setBackground(new Color(207, 193, 178));
    }//GEN-LAST:event_clearbuttonMouseExited

    private void clearbuttonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearbuttonMouseEntered
        clearbutton.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_clearbuttonMouseEntered

    private void clearbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearbuttonMouseClicked
        sntext.setText("");
        guitarmodeltext.setText("");
        brandcombo.setSelectedIndex(0);
        brandcombo.setSelectedIndex(0);
        pricetext.setText("");
        servicebox.setSelected(false);
        
    }//GEN-LAST:event_clearbuttonMouseClicked

    private void sntextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sntextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sntextActionPerformed

    private void guitarmodeltextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guitarmodeltextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guitarmodeltextActionPerformed

    private void brandcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brandcomboActionPerformed

    private void pricetextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricetextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricetextActionPerformed

    private void serviceboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serviceboxActionPerformed

    private void typecombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typecombo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typecombo1ActionPerformed

    private void homeaddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeaddMouseEntered
        homeadd.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_homeaddMouseEntered

    private void homeaddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeaddMouseExited
        homeadd.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_homeaddMouseExited

    private void homeaddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeaddMouseClicked
        adminpanel.setVisible(true);
        homepanel.setVisible(false);
        guitarspanel.setVisible(false);
        aboutuspanel.setVisible(false);
    }//GEN-LAST:event_homeaddMouseClicked

    private void homeviewguitarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeviewguitarMouseEntered
       homeviewguitar.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_homeviewguitarMouseEntered

    private void homeviewguitarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeviewguitarMouseExited
       homeviewguitar.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_homeviewguitarMouseExited

    private void homeviewguitarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeviewguitarMouseClicked
        adminpanel.setVisible(false);
        homepanel.setVisible(false);
        guitarspanel.setVisible(true);
        aboutuspanel.setVisible(false);
    }//GEN-LAST:event_homeviewguitarMouseClicked

    private void addbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addbuttonMouseClicked
        try {
            // Get input values
            int sn = Integer.parseInt(sntext.getText().trim());
            String model = guitarmodeltext.getText().trim();
            String brand = brandcombo.getSelectedItem().toString();
            String type = typecombo1.getSelectedItem().toString();
            double price = Double.parseDouble(pricetext.getText().trim());
            String stringType = stringtypecombo.getSelectedItem().toString();
            boolean freeService = servicebox.isSelected();
            int Quantity = Integer.parseInt(quantity.getText().trim());

            // Validate inputs
            if (!Validation.isValidSN(sn, guitartable1)) {
                JOptionPane.showMessageDialog(this, "Serial Number must be unique and greater than 0! Or Update the table!!!");
                return;
            }
            if (!Validation.isValidModelName(model)) {
                JOptionPane.showMessageDialog(this, "Invalid Guitar Model Name! Must not be empty.");
                return;
            }
            if (!Validation.isValidPrice(price)) {
                JOptionPane.showMessageDialog(this, "Invalid Price! Must be a positive number.");
                return;
            }
            if (!Validation.isValidQuantity(Quantity)) {
                JOptionPane.showMessageDialog(this, "Invalid Quantity! Quantity must be a valid positive number and greater than 0.");
                return;
            }

            // Add validated data to the table
            DefaultTableModel modelTable = (DefaultTableModel) guitartable1.getModel();
            modelTable.addRow(new Object[]{
                sn, model, brand, type, price, freeService ? "Yes" : "No", stringType, Quantity
            });

            // Add validated data to the table
            DefaultTableModel modelTable1 = (DefaultTableModel) guitartable.getModel();
            modelTable1.addRow(new Object[]{
                sn, model, brand, type, price, freeService ? "Yes" : "No", stringType, Quantity
            });
            
            // Clear input fields after adding
            sntext.setText("");
            guitarmodeltext.setText("");
            pricetext.setText("");
            brandcombo.setSelectedIndex(0);
            typecombo1.setSelectedIndex(0);
            stringtypecombo.setSelectedIndex(0);
            servicebox.setSelected(false);

            JOptionPane.showMessageDialog(this, "Guitar added successfully!");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input format! Please check your entries.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage());
        }
    }//GEN-LAST:event_addbuttonMouseClicked

    private void updatebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updatebuttonMouseClicked
        try {
            // Get input values
            int sn = Integer.parseInt(sntext.getText().trim());
            String model = guitarmodeltext.getText().trim();
            String brand = brandcombo.getSelectedItem().toString();
            String type = typecombo1.getSelectedItem().toString();
            double price = Double.parseDouble(pricetext.getText().trim());
            String stringType = stringtypecombo.getSelectedItem().toString();
            boolean freeService = servicebox.isSelected();
            int Quantity = Integer.parseInt(quantity.getText().trim());

            // Get the table model
            DefaultTableModel modelTable = (DefaultTableModel) guitartable1.getModel();
            boolean found = false;
            DefaultTableModel modelTable1 = (DefaultTableModel) guitartable.getModel();
            boolean found1 = false;
            
            if (!Validation.isValidQuantity(Quantity)) {
                JOptionPane.showMessageDialog(this, "Invalid Quantity! Quantity must be a valid positive number and greater than 0.");
                return;
            }

            // Iterate through the table to find the SN
            for (int i = 0; i < modelTable.getRowCount(); i++) {
                int existingSN = (int) modelTable.getValueAt(i, 0); // Column 0 is SN
                if (existingSN == sn) {
                    // SN found - Update row data
                    modelTable.setValueAt(model, i, 1); // Update Model
                    modelTable.setValueAt(brand, i, 2); // Update Brand
                    modelTable.setValueAt(type, i, 3); // Update Type
                    modelTable.setValueAt(price, i, 4); // Update Price
                    modelTable.setValueAt(freeService ? "Yes" : "No", i, 5); // Update Free Service
                    modelTable.setValueAt(stringType, i, 6); // Update String Type
                    modelTable.setValueAt(Quantity, i, 7); // Update Quantity
                    found = true;
                    JOptionPane.showMessageDialog(this, "Guitar updated successfully!");
                    break;
                }
            }
            
            // Iterate through the table to find the SN
            for (int i = 0; i < modelTable1.getRowCount(); i++) {
                int existingSN = (int) modelTable1.getValueAt(i, 0); // Column 0 is SN
                if (existingSN == sn) {
                    // SN found - Update row data
                    modelTable1.setValueAt(model, i, 1); // Update Model
                    modelTable1.setValueAt(brand, i, 2); // Update Brand
                    modelTable1.setValueAt(type, i, 3); // Update Type
                    modelTable1.setValueAt(price, i, 4); // Update Price
                    modelTable1.setValueAt(freeService ? "Yes" : "No", i, 5); // Update Free Service
                    modelTable1.setValueAt(stringType, i, 6); // Update String Type
                    modelTable1.setValueAt(Quantity, i, 7); // Update Quantity
                    found1 = true;
                    break;
                }
            }

            if (!found) {
                // If SN does not exist, prompt user to add instead
                JOptionPane.showMessageDialog(this, "Serial Number not found! Please add the guitar instead.");
            }

            // Clear input fields after processing
            sntext.setText("");
            guitarmodeltext.setText("");
            pricetext.setText("");
            brandcombo.setSelectedIndex(0);
            typecombo1.setSelectedIndex(0);
            stringtypecombo.setSelectedIndex(0);
            servicebox.setSelected(false);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input format! Please check your entries.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage());
        }
    }//GEN-LAST:event_updatebuttonMouseClicked

    private void deletebuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletebuttonMouseClicked
        try {
            // Get the serial number input
            int sn = Integer.parseInt(sntext.getText().trim());

            // Get the table model
            DefaultTableModel modelTable = (DefaultTableModel) guitartable1.getModel();
            boolean found = false;
            DefaultTableModel modelTable1 = (DefaultTableModel) guitartable.getModel();
            boolean found1 = false;

            // Iterate through the table rows to find the matching SN
            for (int i = 0; i < modelTable.getRowCount(); i++) {
                int existingSN = (int) modelTable.getValueAt(i, 0); // Column 0 is SN
                if (existingSN == sn) {
                    // SN found - Remove row
                    modelTable.removeRow(i);
                    found = true;
                    
                    modelTable1.removeRow(i);
                    found1 = true;
                    JOptionPane.showMessageDialog(this, "Guitar with SN " + sn + " has been deleted from the stock.");
                    break;
                }
            }
            
            

            if (!found) {
                // If SN does not exist, notify the user
                JOptionPane.showMessageDialog(this, "Guitar with SN " + sn + " is not in the stock.");
            }

            // Clear the SN input field after processing
            sntext.setText("");

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid Serial Number! Please enter a valid number.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage());
        }        
    }//GEN-LAST:event_deletebuttonMouseClicked

    private void stringtypecomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stringtypecomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stringtypecomboActionPerformed

    private void sortbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyActionPerformed
        sortData();
    }//GEN-LAST:event_sortbyActionPerformed

    private void searchguitarsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchguitarsMouseEntered
       searchguitars.setBackground(new Color(162, 151, 139));
    }//GEN-LAST:event_searchguitarsMouseEntered

    private void searchguitarsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchguitarsMouseExited
       searchguitars.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_searchguitarsMouseExited

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    private void sorttypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sorttypeActionPerformed
        sortData();
    }//GEN-LAST:event_sorttypeActionPerformed

    private void searchguitarsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchguitarsMouseClicked
        searchGuitarspanel();
    }//GEN-LAST:event_searchguitarsMouseClicked

    private void binarysearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarysearchActionPerformed
        if (binarysearch.isSelected()) {
            sortbyguitars.setEnabled(true);
        } else {
            sortbyguitars.setEnabled(false);
        }
    }//GEN-LAST:event_binarysearchActionPerformed


private void searchGuitarspanel() {
    String searchText = searchguitarsfield.getText().trim().toLowerCase();
    boolean useBinarySearch = binarysearch.isSelected();

    DefaultTableModel model = (DefaultTableModel) guitartable1.getModel();
    List<GuitarDetails> searchList = new ArrayList<>();

    // Populate searchList from the table
    for (int i = 0; i < model.getRowCount(); i++) {
        searchList.add(new GuitarDetails(
                (int) model.getValueAt(i, 0),
                (String) model.getValueAt(i, 1),
                (String) model.getValueAt(i, 2),
                (String) model.getValueAt(i, 3),
                (double) model.getValueAt(i, 4),
                "Yes".equals(model.getValueAt(i, 5)),
                (String) model.getValueAt(i, 6),
                (int) model.getValueAt(i, 7)
        ));
    }

    if (searchText.isEmpty()) {
        // If search text is empty, repopulate the table with the original data
        refreshGuitarspanelTable();
        return;
    }

    if (useBinarySearch) {
        // Binary Search (Only by Name)

        // Sort by Name for binary search to work correctly
        Collections.sort(searchList, Comparator.comparing(GuitarDetails::getName));

        int index = BinarySearch.search(searchList, searchText); // Use the updated BinarySearch

        if (index != -1) {
            // Found: Update the table with the single result
            model.setRowCount(0);
            GuitarDetails guitar = searchList.get(index);
            model.addRow(new Object[]{
                    guitar.getSn(),
                    guitar.getName(),
                    guitar.getBrand(),
                    guitar.getType(),
                    guitar.getPrice(),
                    guitar.isFreeService() ? "Yes" : "No",
                    guitar.getStringType(),
                    guitar.getQuantity()
            });
        } else {
            // Not found
            JOptionPane.showMessageDialog(this, "No guitars found matching the search criteria.");
        }

    } else {
        // Linear Search
        List<GuitarDetails> results = LinearSearch.search(searchList, searchText); // Use your existing LinearSearch

        if (results.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No guitars found matching the search criteria.");
        } else {
            // Update the table with search results
            model.setRowCount(0);
            for (GuitarDetails guitar : results) {
                model.addRow(new Object[]{
                        guitar.getSn(),
                        guitar.getName(),
                        guitar.getBrand(),
                        guitar.getType(),
                        guitar.getPrice(),
                        guitar.isFreeService() ? "Yes" : "No",
                        guitar.getStringType(),
                        guitar.getQuantity()
                });
            }
        }
    }
}
    
    // Helper method to refresh the table with original data
    private void refreshGuitarspanelTable() {
        DefaultTableModel model = (DefaultTableModel) guitartable1.getModel();
        model.setRowCount(0); // Clear the table

        // Repopulate the table with the original data
        for (GuitarDetails guitar : guitarList) {
            model.addRow(new Object[]{
                guitar.getSn(),
                guitar.getName(),
                guitar.getBrand(),
                guitar.getType(),
                guitar.getPrice(),
                guitar.isFreeService() ? "Yes" : "No",
                guitar.getStringType(),
                guitar.getQuantity()
            });
        }
    }

    private void sorttypeguitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sorttypeguitarActionPerformed
        sortDataGuitarsPanel();
    }//GEN-LAST:event_sorttypeguitarActionPerformed

    private void sortbyguitarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortbyguitarsActionPerformed
        sortDataGuitarsPanel();
    }//GEN-LAST:event_sortbyguitarsActionPerformed

        private void sortData() {
        String sortBy = (String) sortby.getSelectedItem();
        String sortType = (String) sorttype.getSelectedItem();

        if (!"Sort By".equals(sortBy) && !"Sort Type".equals(sortType)) {
            List<GuitarDetails> dataToSort = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) guitartable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                dataToSort.add(new GuitarDetails(
                        (int) model.getValueAt(i, 0),
                        (String) model.getValueAt(i, 1),
                        (String) model.getValueAt(i, 2),
                        (String) model.getValueAt(i, 3),
                        (double) model.getValueAt(i, 4),
                        "Yes".equals(model.getValueAt(i, 5)),
                        (String) model.getValueAt(i, 6),
                        (int) model.getValueAt(i, 7)
                ));
            }

            Comparator<GuitarDetails> comparator = getComparator(sortBy);

            switch (sortType) {
                case "Insertion":
                    InsertionSort.sort(dataToSort, comparator);
                    break;
                case "Merge":
                    MergeSort.sort(dataToSort, comparator);
                    break;
                case "Selection":
                    SelectionSort.sort(dataToSort, comparator);
                    break;
            }

            // Update table model
            model.setRowCount(0);
            for (GuitarDetails guitar : dataToSort) {
                model.addRow(new Object[]{
                    guitar.getSn(),
                    guitar.getName(),
                    guitar.getBrand(),
                    guitar.getType(),
                    guitar.getPrice(),
                    guitar.isFreeService() ? "Yes" : "No",
                    guitar.getStringType(),
                    guitar.getQuantity()
                });
            }
        }
    }

    // Method to handle sorting for guitarspanel
    private void sortDataGuitarsPanel() {
        String sortBy = (String) sortbyguitars.getSelectedItem();
        String sortType = (String) sorttypeguitar.getSelectedItem();

        if (!"Sort By".equals(sortBy) && !"Sort Type".equals(sortType)) {
            List<GuitarDetails> dataToSort = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) guitartable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                dataToSort.add(new GuitarDetails(
                        (int) model.getValueAt(i, 0),
                        (String) model.getValueAt(i, 1),
                        (String) model.getValueAt(i, 2),
                        (String) model.getValueAt(i, 3),
                        (double) model.getValueAt(i, 4),
                        "Yes".equals(model.getValueAt(i, 5)),
                        (String) model.getValueAt(i, 6),
                        (int) model.getValueAt(i, 7)
                ));
            }

            Comparator<GuitarDetails> comparator = getComparator(sortBy);

            switch (sortType) {
                case "Insertion":
                    InsertionSort.sort(dataToSort, comparator);
                    break;
                case "Merge":
                    MergeSort.sort(dataToSort, comparator);
                    break;
                case "Selection":
                    SelectionSort.sort(dataToSort, comparator);
                    break;
            }

            // Update table model
            model.setRowCount(0);
            for (GuitarDetails guitar : dataToSort) {
                model.addRow(new Object[]{
                        guitar.getSn(),
                        guitar.getName(),
                        guitar.getBrand(),
                        guitar.getType(),
                        guitar.getPrice(),
                        guitar.isFreeService() ? "Yes" : "No",
                        guitar.getStringType(),
                        guitar.getQuantity()
                });
            }
        }
    }

    // Method to handle searching for guitarspanel



    // Method to get comparator based on selected column
    private Comparator<GuitarDetails> getComparator(String sortBy) {
        switch (sortBy) {
            case "SN":
                return Comparator.comparing(GuitarDetails::getSn);
            case "Name":
                return Comparator.comparing(GuitarDetails::getName);
            case "Brand":
                return Comparator.comparing(GuitarDetails::getBrand);
            case "Type":
                return Comparator.comparing(GuitarDetails::getType);
            case "Price":
                return Comparator.comparing(GuitarDetails::getPrice);
            case "Free Service":
                return Comparator.comparing(GuitarDetails::isFreeService);
            case "StringType":
                return Comparator.comparing(GuitarDetails::getStringType);
            case "Quantity":
                return Comparator.comparing(GuitarDetails::getQuantity);
            default:
                return null;
        }
    }

    
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
        // Initialize sample guitar data
    private void initializeData() {
        guitarList = new LinkedList<>();

        // Adding sample guitars
        addGuitarStock(new GuitarDetails(1, "Stratocaster", "Fender", "Electric", 1200.99, true, "Nylon", 10));
        addGuitarStock(new GuitarDetails(2, "Les Paul", "Gibson", "Electric", 2500.00, false, "Steel", 20));
        addGuitarStock(new GuitarDetails(3, "RG550", "Deviser", "Electric", 999.99, true, "Steel", 30));
        addGuitarStock(new GuitarDetails(4, "FG800", "Enya", "Acoustic", 300.50, false, "Steel", 12));
        addGuitarStock(new GuitarDetails(5, "214CE", "Deviser", "Acoustic", 1500.75, true, "Nylon", 3));
    }
    
        // Method to add guitar data and populate the table
    private void addGuitarStock(GuitarDetails guitar) {
        guitarList.add(guitar); // Add to the list

        // Update the table model
        DefaultTableModel model = (DefaultTableModel) guitartable.getModel(); // guitartable1 is your existing JTable
        DefaultTableModel model1 = (DefaultTableModel) guitartable1.getModel(); // guitartable1 is your existing JTable
        model.addRow(new Object[]{
            guitar.getSn(),
            guitar.getName(),
            guitar.getBrand(),
            guitar.getType(),
            guitar.getPrice(),
            guitar.isFreeService() ? "Yes" : "No",
            guitar.getStringType(),
            guitar.getQuantity()
        });
        model1.addRow(new Object[]{
            guitar.getSn(),
            guitar.getName(),
            guitar.getBrand(),
            guitar.getType(),
            guitar.getPrice(),
            guitar.isFreeService() ? "Yes" : "No",
            guitar.getStringType(),
            guitar.getQuantity()
        });
    }
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StringTheoryGuitar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutp1;
    private javax.swing.JLabel aboutp2;
    private javax.swing.JLabel aboutusbutton;
    private javax.swing.JPanel aboutuspanel;
    private javax.swing.JLabel aboutustitle;
    private javax.swing.JLabel addbutton;
    private javax.swing.JLabel adminbutton;
    private javax.swing.JPanel adminpanel;
    private javax.swing.JLabel adminpaneltext;
    private javax.swing.JLabel backgroundimg;
    private javax.swing.JCheckBox binarysearch;
    private javax.swing.JComboBox<String> brandcombo;
    private javax.swing.JLabel clearbutton;
    private javax.swing.JLabel deletebutton;
    private javax.swing.JLabel forgotpassbutton;
    private javax.swing.JScrollPane guitarlist;
    private javax.swing.JScrollPane guitarlist1;
    private javax.swing.JTextField guitarmodeltext;
    private javax.swing.JLabel guitarsbutton;
    private javax.swing.JPanel guitarspanel;
    private javax.swing.JTable guitartable;
    private javax.swing.JTable guitartable1;
    private javax.swing.JLabel homeadd;
    private javax.swing.JLabel homebutton;
    private javax.swing.JPanel homepanel;
    private javax.swing.JLabel homeviewguitar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel loginbutton;
    private javax.swing.JPanel loginpanel;
    private javax.swing.JLabel logoutbutton;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JPanel navigationbar;
    private javax.swing.JLabel passlabel;
    private javax.swing.JPasswordField passtextfield;
    private javax.swing.JTextField pricetext;
    private javax.swing.JTextField quantity;
    private javax.swing.JLabel searchguitars;
    private javax.swing.JTextField searchguitarsfield;
    private javax.swing.JCheckBox servicebox;
    private javax.swing.JLabel snlabel;
    private javax.swing.JLabel snlabel1;
    private javax.swing.JLabel snlabel2;
    private javax.swing.JLabel snlabel3;
    private javax.swing.JLabel snlabel4;
    private javax.swing.JLabel snlabel5;
    private javax.swing.JTextField sntext;
    private javax.swing.JComboBox<String> sortby;
    private javax.swing.JComboBox<String> sortbyguitars;
    private javax.swing.JComboBox<String> sorttype;
    private javax.swing.JComboBox<String> sorttypeguitar;
    private javax.swing.JComboBox<String> stringtypecombo;
    private javax.swing.JLabel stringtypelabel;
    private javax.swing.JComboBox<String> typecombo1;
    private javax.swing.JLabel updatebutton;
    private javax.swing.JLabel usernamelabel;
    private javax.swing.JTextField usernametextfield;
    // End of variables declaration//GEN-END:variables
}
